import streamlit as st
import pandas as pd
import numpy as np
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import joblib
import plotly.graph_objects as go
# pip install streamlit-aggrid
from st_aggrid import AgGrid, GridOptionsBuilder, JsCode
# pip install -r requirements.txt

# ---------- CSS CHO TO√ÄN B·ªò APP: T√îNG XANH D∆Ø∆†NG - TR·∫ÆNG + GRADIENT + CARD + BUTTON ---------- #
st.markdown("""
<style>
body, .stApp {
    background: linear-gradient(135deg, #f8fbff 0%, #ffffff 100%);
    color: #1e3a8a;
}
section[data-testid="stSidebar"] {
    background: linear-gradient(115deg, #1e40af 20%, #3b82f6 100%);
    color: #fff;
}
.stSidebar .sidebar-content { color: #fff; }
h1, h2, h3, .stApp header { color: #1e40af !important; }
hr {
    border: none;
    height: 2px;
    background: linear-gradient(90deg, #1e40af, #3b82f6, #dbeafe);
    margin: 20px 0;
}
.stButton>button {
    color: #1e40af;
    background: #ffffff;
    border-radius: 8px;
    border: 2px solid #3b82f6;
    transition: all 0.3s ease;
    font-weight: 600;
}
.stButton>button:hover {
    background: #3b82f6;
    color: #fff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59,130,246,0.4);
}
.stDataFrame, .stTable, .stAgGrid {
    background: #ffffff !important;
    border-radius: 10px;
    border: 1px solid #e5e7eb;
    transition: all 0.3s ease;
}
.stDataFrame:hover, .stTable:hover, .stAgGrid:hover {
    box-shadow: 0 6px 20px rgba(59,130,246,0.2);
    transform: translateY(-2px);
    border-color: #3b82f6;
}
/* N√∫t b·∫•m gradient */
.blue-btn {
    display: inline-block;
    padding: 12px 28px;
    font-size: 16px;
    font-weight: 600;
    color: #fff !important;
    background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
    border: none;
    border-radius: 25px;
    box-shadow: 0 4px 15px rgba(59,130,246,0.3);
    cursor: pointer;
    margin: 12px 10px 12px 0;
    transition: all 0.3s ease;
}
.blue-btn:hover {
    box-shadow: 0 8px 25px rgba(59,130,246,0.4);
    background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
    transform: translateY(-2px) scale(1.02);
}
/* Card t·ªïng quan, cluster, section-box */
.summary-card, .section-box, .cluster-card {
    border-radius: 15px;
    padding: 20px 28px;
    margin: 16px 0 20px 0;
    box-shadow: 0 4px 20px rgba(59,130,246,0.15);
    transition: all 0.3s ease;
    border: 1px solid rgba(59,130,246,0.1);
}
.summary-card:hover, .section-box:hover, .cluster-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 30px rgba(59,130,246,0.25);
}
.summary-card {
    background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
    color: #fff;
    border-left: 6px solid #1d4ed8;
    font-size: 18px;
    font-weight: 500;
}
.summary-card-title {
    font-size: 24px;
    font-weight: 700;
    letter-spacing: 0.5px;
    color: #ffffff;
    margin-bottom: 8px;
}
.section-box {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    color: #1e3a8a;
    border-left: 4px solid #3b82f6;
}
.cluster-card {
    background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
    color: #1e40af;
    font-size: 16px;
    font-weight: 500;
    border-left: 4px solid #60a5fa;
}
.cluster-card:hover {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
}
/* Hover cho keyword tags */
.keyword-tag {
    background: #dbeafe;
    color: #1e40af;
    border-radius: 6px;
    padding: 4px 10px;
    margin: 2px 4px 2px 0;
    display: inline-block;
    transition: all 0.2s ease;
    font-weight: 500;
    font-size: 14px;
}
.keyword-tag:hover {
    background: #3b82f6;
    color: #fff;
    transform: scale(1.05);
}
</style>
""", unsafe_allow_html=True)

# ---------- LOAD DATA ---------- #
@st.cache_data
def load_data():
    reviews = pd.read_excel("Du lieu cung cap/Reviews.xlsx")
    overview_companies = pd.read_excel("Du lieu cung cap/Overview_Companies.xlsx")
    overview_reviews = pd.read_excel("Du lieu cung cap/Overview_Reviews.xlsx")
    overview_reviews = overview_reviews.rename(columns={"id": "company_id"})
    overview_companies = overview_companies.rename(columns={"id": "company_id"})
    data = reviews.merge(overview_reviews[['company_id', 'Overall rating']], left_on='id', right_on='company_id', how='left') \
                  .merge(overview_companies[['company_id', 'Company Name', 'Company Type', 'Company size']], on='company_id', how='left')
    data = data.rename(columns={"Company Name_y": "Company Name"})
    data = data.dropna(subset=['What I liked'])
    return data, overview_companies, overview_reviews

data, overview_companies, overview_reviews = load_data()

sentiment_model = joblib.load("sentiment_model.pkl")
cluster_model = joblib.load("cluster_model.pkl")
cluster_keywords = joblib.load("cluster_keywords.pkl")

cluster_improvement = {
    0: "TƒÉng c∆∞·ªùng training, l·ªô tr√¨nh ph√°t tri·ªÉn c√° nh√¢n r√µ r√†ng.",
    1: "C·∫£i thi·ªán ph√∫c l·ª£i, xem x√©t tƒÉng l∆∞∆°ng v√† ch·∫ø ƒë·ªô ƒë√£i ng·ªô.",
    2: "X√¢y d·ª±ng vƒÉn h√≥a doanh nghi·ªáp g·∫Øn k·∫øt, ƒëa d·∫°ng ho·∫°t ƒë·ªông team-building.",
    3: "TƒÉng c∆∞·ªùng truy·ªÅn th√¥ng n·ªôi b·ªô, ch√∫ tr·ªçng feedback nh√¢n vi√™n.",
}

cluster_names = {
    0: "VƒÉn ph√≤ng ƒë·∫πp & M√¥i tr∆∞·ªùng t·ªët",
    1: "Ph√∫c l·ª£i t·ªët",
    2: "C·∫ßn c·∫£i thi·ªán ƒë√†o t·∫°o",
    3: "Truy·ªÅn th√¥ng n·ªôi b·ªô t·ªët"
}

st.sidebar.title("Ph√¢n t√≠ch d·ªØ li·ªáu ITViec")
company_names = data["Company Name"].dropna().unique()
selected_companies = st.sidebar.multiselect(
    "Ch·ªçn c√¥ng ty ƒë·ªÉ ph√¢n t√≠ch/so s√°nh", company_names, default=[company_names[0]]
)

# B·ªô l·ªçc n√¢ng cao
unique_years = data['Year'].dropna().unique() if 'Year' in data.columns else []
unique_positions = data['Position'].dropna().unique() if 'Position' in data.columns else []
unique_sentiments = ['positive (t√≠ch c·ª±c)', 'neutral (trung t√≠nh)', 'negative (ti√™u c·ª±c)']

with st.sidebar.expander("üéØ B·ªô l·ªçc n√¢ng cao"):
    selected_year = st.selectbox("NƒÉm", ["T·∫•t c·∫£"] + sorted(map(str, unique_years))) if len(unique_years) > 1 else "T·∫•t c·∫£"
    selected_position = st.selectbox("Ch·ª©c v·ª•", ["T·∫•t c·∫£"] + list(unique_positions)) if len(unique_positions) > 1 else "T·∫•t c·∫£"
    selected_sentiment = st.selectbox("C·∫£m x√∫c", ["T·∫•t c·∫£"] + unique_sentiments)

tab = st.sidebar.radio(
    "Ch·ªçn ch·∫ø ƒë·ªô ph√¢n t√≠ch",
    ("T·ªïng quan 1 c√¥ng ty", "So s√°nh nhi·ªÅu c√¥ng ty", "Ph√¢n c·ª•m ƒë√°nh gi√°", "Dashboard Radar"),
)

# Apply filter function
def apply_filters(data_to_filter):
    filtered_data = data_to_filter.copy()
    if selected_year != "T·∫•t c·∫£" and 'Year' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['Year'].astype(str) == selected_year]
    if selected_position != "T·∫•t c·∫£" and 'Position' in filtered_data.columns:
        filtered_data = filtered_data[filtered_data['Position'] == selected_position]
    return filtered_data

# ---------- TAB: T·ªîNG QUAN 1 C√îNG TY ---------- #
if tab == "T·ªïng quan 1 c√¥ng ty" and selected_companies:
    selected_company = selected_companies[0]
    st.header(f"Ph√¢n t√≠ch c·∫£m x√∫c review cho {selected_company}")
    company_reviews = data[data["Company Name"] == selected_company]
    
    # Apply filters
    company_reviews = apply_filters(company_reviews)
    
    if company_reviews.empty:
        st.warning(f"Kh√¥ng c√≥ review n√†o cho c√¥ng ty {selected_company} v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
    else:
        filtered_reviews = company_reviews[company_reviews['What I liked'].notna()].copy()
        filtered_reviews['Sentiment'] = sentiment_model.predict(filtered_reviews['What I liked'])
        company_reviews = company_reviews.copy()
        company_reviews.loc[company_reviews['What I liked'].notna(), 'Sentiment'] = filtered_reviews['Sentiment'].values

        sentiment_map = {
            2: "positive (t√≠ch c·ª±c)",
            1: "neutral (trung t√≠nh)",
            0: "negative (ti√™u c·ª±c)"
        }
        df_show = company_reviews[['What I liked', 'Sentiment']].copy()
        df_show['C·∫£m x√∫c ƒë√°nh gi√°'] = df_show['Sentiment'].map(sentiment_map)
        df_show = df_show[['What I liked', 'C·∫£m x√∫c ƒë√°nh gi√°']]

        sentiment_counts = df_show['C·∫£m x√∫c ƒë√°nh gi√°'].value_counts()
        # Card t·ªïng quan
        st.markdown(f"""
        <div class="summary-card">
            <div class="summary-card-title">T·ªïng quan c·∫£m x√∫c {selected_company}</div>
            <ul>
                <li>Review t√≠ch c·ª±c: <b>{sentiment_counts.get('positive (t√≠ch c·ª±c)',0)}</b></li>
                <li>Review trung t√≠nh: <b>{sentiment_counts.get('neutral (trung t√≠nh)',0)}</b></li>
                <li>Review ti√™u c·ª±c: <b>{sentiment_counts.get('negative (ti√™u c·ª±c)',0)}</b></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        # N√∫t b·∫•m v·ªõi ch·ª©c nƒÉng th·ª±c t·∫ø
        if st.button("üîç Xem ƒë·ªÅ xu·∫•t c·∫£i thi·ªán", key="improvement_btn"):
            # T√≠nh t·ª∑ l·ªá c·∫£m x√∫c
            total_reviews = len(df_show)
            positive_ratio = sentiment_counts.get('positive (t√≠ch c·ª±c)', 0) / total_reviews
            negative_ratio = sentiment_counts.get('negative (ti√™u c·ª±c)', 0) / total_reviews
            neutral_ratio = sentiment_counts.get('neutral (trung t√≠nh)', 0) / total_reviews
            
            # ƒê·ªÅ xu·∫•t d·ª±a tr√™n ph√¢n t√≠ch c·∫£m x√∫c
            improvements = []
            
            if negative_ratio > 0.3:  # N·∫øu > 30% review ti√™u c·ª±c
                improvements.append("üî¥ **∆Øu ti√™n cao**: C·∫ßn c·∫£i thi·ªán ngay c√°c v·∫•n ƒë·ªÅ g√¢y b·ª©c x√∫c cho nh√¢n vi√™n")
                improvements.append("üìû T·ªï ch·ª©c c√°c bu·ªïi listening session ƒë·ªÉ l·∫Øng nghe ph·∫£n h·ªìi tr·ª±c ti·∫øp")
                
            if positive_ratio < 0.4:  # N·∫øu < 40% review t√≠ch c·ª±c
                improvements.append("‚ö†Ô∏è **C·∫ßn ch√∫ √Ω**: TƒÉng c∆∞·ªùng c√°c y·∫øu t·ªë t·∫°o s·ª± h√†i l√≤ng cho nh√¢n vi√™n")
                improvements.append("üéØ X√¢y d·ª±ng ch∆∞∆°ng tr√¨nh recognition & reward r√µ r√†ng")
                
            if neutral_ratio > 0.4:  # N·∫øu > 40% review trung t√≠nh
                improvements.append("üìà **C∆° h·ªôi ph√°t tri·ªÉn**: Nhi·ªÅu nh√¢n vi√™n ƒëang ·ªü tr·∫°ng th√°i trung l·∫≠p")
                improvements.append("üí° T·∫°o th√™m c√°c ho·∫°t ƒë·ªông engagement ƒë·ªÉ n√¢ng cao tr·∫£i nghi·ªám")
                
            # ƒê·ªÅ xu·∫•t chung
            improvements.extend([
                "üè¢ **M√¥i tr∆∞·ªùng l√†m vi·ªác**: ƒê·∫ßu t∆∞ c·∫£i thi·ªán kh√¥ng gian l√†m vi·ªác v√† ti·ªán √≠ch",
                "üìö **ƒê√†o t·∫°o & ph√°t tri·ªÉn**: X√¢y d·ª±ng l·ªô tr√¨nh career path r√µ r√†ng",
                "üí∞ **Ph√∫c l·ª£i**: Review v√† c·∫£i thi·ªán g√≥i l∆∞∆°ng th∆∞·ªüng, benefits",
                "ü§ù **Qu·∫£n l√Ω**: TƒÉng c∆∞·ªùng training cho management team v·ªÅ leadership skills",
                "üì± **Truy·ªÅn th√¥ng n·ªôi b·ªô**: C·∫£i thi·ªán k√™nh th√¥ng tin v√† feedback hai chi·ªÅu"
            ])
            
            # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t
            st.markdown("""
            <div class="section-box">
                <h3>üéØ ƒê·ªÅ xu·∫•t c·∫£i thi·ªán cho """ + selected_company + """</h3>
            </div>
            """, unsafe_allow_html=True)
            
            for improvement in improvements:
                st.markdown(f"‚Ä¢ {improvement}")
                
            # Th√™m ph√¢n t√≠ch t·ª´ keywords n·∫øu c√≥
            if selected_company in [overview_companies.iloc[i]['Company Name'] for i in range(len(overview_companies))]:
                company_idx = overview_companies[overview_companies['Company Name'] == selected_company].index[0]
                if company_idx < len(cluster_model.labels_):
                    cluster_id = cluster_model.labels_[company_idx]
                    if cluster_id in cluster_keywords:
                        st.markdown(f"""
                        <div class="cluster-card">
                            <b>üîç Ph√¢n t√≠ch d·ª±a tr√™n clustering:</b><br>
                            <b>Nh√≥m:</b> {cluster_names.get(cluster_id, f'Cluster {cluster_id}')}<br>
                            <b>ƒê·∫∑c ƒëi·ªÉm ch√≠nh:</b> {', '.join(cluster_keywords[cluster_id])}<br>
                            <b>H∆∞·ªõng c·∫£i thi·ªán:</b> {cluster_improvement.get(cluster_id, 'ƒêang ph√¢n t√≠ch...')}
                        </div>
                        """, unsafe_allow_html=True)

        # Section review + AgGrid
        st.markdown('<div class="section-box">', unsafe_allow_html=True)
        st.subheader("C√°c review v√† c·∫£m x√∫c")
        
        # AgGrid configuration
        gb = GridOptionsBuilder.from_dataframe(df_show)
        gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=True)
        gb.configure_pagination(paginationAutoPageSize=True)
        
        # Tooltip cho t·ª´ng cell
        cell_tooltip = JsCode("""
        function(params) {
            if(params.colDef.field === 'C·∫£m x√∫c ƒë√°nh gi√°') {
                return {'value': 'Ph√¢n lo·∫°i: ' + params.value};
            }
            return {'value': params.value};
        }
        """)
        
        gb.configure_column('What I liked', tooltipField='What I liked', cellRenderer=cell_tooltip, width=400)
        gb.configure_column('C·∫£m x√∫c ƒë√°nh gi√°', tooltipField='C·∫£m x√∫c ƒë√°nh gi√°', cellRenderer=cell_tooltip, width=200)
        gridOptions = gb.build()

        AgGrid(df_show, gridOptions=gridOptions, enable_enterprise_modules=False, 
               height=350, fit_columns_on_grid_load=True, theme='streamlit')
        st.markdown('</div>', unsafe_allow_html=True)

        # Bar chart section
        st.markdown('<div class="section-box">', unsafe_allow_html=True)
        st.subheader("Bi·ªÉu ƒë·ªì t·ªïng quan c·∫£m x√∫c")
        st.bar_chart(sentiment_counts)
        st.markdown('</div>', unsafe_allow_html=True)

        # Wordcloud t·ª´ng nh√≥m c·∫£m x√∫c, colormap xanh d∆∞∆°ng
        for sentiment_text, sentiment_label in [
            ('positive', "T√≠ch c·ª±c"),
            ('negative', "Ti√™u c·ª±c"),
            ('neutral', "Trung t√≠nh")
        ]:
            text = " ".join(df_show[df_show['C·∫£m x√∫c ƒë√°nh gi√°'].str.contains(sentiment_text, case=False)]['What I liked'].fillna(''))
            if text.strip():
                wc = WordCloud(width=800, height=400, background_color="white", colormap="Blues").generate(text)
                st.markdown('<div class="section-box">', unsafe_allow_html=True)
                st.subheader(f"Wordcloud cho review {sentiment_label}")
                st.image(wc.to_array())
                st.markdown('</div>', unsafe_allow_html=True)

# ---------- TAB: SO S√ÅNH NHI·ªÄU C√îNG TY ---------- #
elif tab == "So s√°nh nhi·ªÅu c√¥ng ty" and selected_companies:
    st.header("So s√°nh c·∫£m x√∫c c√°c c√¥ng ty ƒë√£ ch·ªçn")
    compare_df = data[data["Company Name"].isin(selected_companies)].copy()
    
    # Apply filters
    compare_df = apply_filters(compare_df)
    
    if compare_df.empty:
        st.warning("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu review ƒë·ªÉ so s√°nh v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
    else:
        filtered_reviews = compare_df[compare_df['What I liked'].notna()].copy()
        filtered_reviews['Sentiment'] = sentiment_model.predict(filtered_reviews['What I liked'])
        compare_df.loc[compare_df['What I liked'].notna(), 'Sentiment'] = filtered_reviews['Sentiment'].values

        sentiment_map = {
            2: "positive (t√≠ch c·ª±c)",
            1: "neutral (trung t√≠nh)",
            0: "negative (ti√™u c·ª±c)"
        }
        compare_df['C·∫£m x√∫c ƒë√°nh gi√°'] = compare_df['Sentiment'].map(sentiment_map)

        st.markdown('<div class="section-box">', unsafe_allow_html=True)
        st.subheader("B·∫£ng so s√°nh c·∫£m x√∫c")
        sentiment_counts = (
            compare_df.groupby(['Company Name', 'C·∫£m x√∫c ƒë√°nh gi√°']).size().unstack(fill_value=0)
        )
        st.bar_chart(sentiment_counts)
        st.markdown('</div>', unsafe_allow_html=True)

        st.markdown('<div class="section-box">', unsafe_allow_html=True)
        st.subheader("Bi·ªÉu ƒë·ªì ph√¢n b·ªï c·∫£m x√∫c theo c√¥ng ty")
        fig, ax = plt.subplots()
        sentiment_counts.plot(kind='bar', ax=ax)
        st.pyplot(fig)
        st.markdown('</div>', unsafe_allow_html=True)

        st.markdown('<div class="section-box">', unsafe_allow_html=True)
        st.subheader("C√°c review n·ªïi b·∫≠t t·ª´ng c√¥ng ty (AgGrid)")
        
        # AgGrid for comparison
        compare_display = compare_df[['Company Name', 'What I liked', 'C·∫£m x√∫c ƒë√°nh gi√°']].copy()
        gb_compare = GridOptionsBuilder.from_dataframe(compare_display)
        gb_compare.configure_default_column(editable=False, filter=True, sortable=True, resizable=True)
        gb_compare.configure_pagination(paginationAutoPageSize=True)
        gb_compare.configure_column('Company Name', pinned='left', width=150)
        gb_compare.configure_column('What I liked', width=400)
        gb_compare.configure_column('C·∫£m x√∫c ƒë√°nh gi√°', width=180)
        gridOptions_compare = gb_compare.build()

        AgGrid(compare_display, gridOptions=gridOptions_compare, enable_enterprise_modules=False, 
               height=400, fit_columns_on_grid_load=True, theme='streamlit')
        st.markdown('</div>', unsafe_allow_html=True)

# ---------- TAB: PH√ÇN C·ª§M ƒê√ÅNH GI√Å ---------- #
elif tab == "Ph√¢n c·ª•m ƒë√°nh gi√°" and selected_companies:
    st.header("Ph√¢n c·ª•m ƒë√°nh gi√° c√°c c√¥ng ty ƒë√£ ch·ªçn")
    cluster_labels = {}
    for company in selected_companies:
        idx = overview_companies[overview_companies['Company Name'] == company].index[0]
        label = cluster_model.labels_[idx]
        cluster_labels[company] = label

    cluster_df = pd.DataFrame({
        "Company Name": list(cluster_labels.keys()),
        "C·ª•m √Ω nghƒ©a": [cluster_names.get(l, f"Cluster {l}") for l in cluster_labels.values()],
        "Top keywords": [cluster_keywords.get(l, []) for l in cluster_labels.values()],
        "Improvement": [cluster_improvement.get(l, "ƒêang c·∫≠p nh·∫≠t...") for l in cluster_labels.values()]
    })

    for i, row in cluster_df.iterrows():
        st.markdown(f"""
        <div class="cluster-card">
            <b>{row['Company Name']}</b><br>
            <b>Nh√≥m:</b> {row['C·ª•m √Ω nghƒ©a']}<br>
            <b>Top keywords:</b> {" ".join(f"<span class='keyword-tag'>{k}</span>" for k in row['Top keywords'])}
            <br>
            <b>ƒê·ªÅ xu·∫•t c·∫£i thi·ªán:</b> {row['Improvement']}
        </div>
        """, unsafe_allow_html=True)

    st.subheader("T·ª∑ l·ªá c√°c c·ª•m tr√™n to√†n b·ªô d·ªØ li·ªáu")
    cluster_counts = pd.Series(cluster_model.labels_).value_counts().sort_index()
    fig2, ax2 = plt.subplots()
    colors = ['#2193b0', '#6dd5ed', '#76a9e7', '#b3e1ff']
    ax2.pie(cluster_counts, labels=[cluster_names.get(i, f"Cluster {i}") for i in cluster_counts.index], 
            autopct='%1.1f%%', startangle=90, colors=colors)
    ax2.axis("equal")
    st.pyplot(fig2)

# ---------- TAB: DASHBOARD RADAR ---------- #
elif tab == "Dashboard Radar" and selected_companies:
    st.header("Dashboard Radar - So s√°nh ƒëa chi·ªÅu gi·ªØa c√°c c√¥ng ty")
    metrics = [
        'Salary & benefits',
        'Training & learning',
        'Management cares about me',
        'Culture & fun',
        'Office & workspace'
    ]
    
    # Responsive container v·ªõi font adaptive
    col1, col2 = st.columns([2, 1])
    
    with col1:
        fig = go.Figure()
        for company in selected_companies:
            comp_data = overview_reviews[overview_reviews['Company Name'] == company]
            if not comp_data.empty:
                values = [comp_data[m].values[0] if m in comp_data else 0 for m in metrics]
                fig.add_trace(go.Scatterpolar(
                    r=values,
                    theta=metrics,
                    fill='toself',
                    name=company,
                    hovertemplate='<b>%{fullData.name}</b><br>' +
                                 '%{theta}: %{r}/5<br>' +
                                 '<extra></extra>',
                    hoverlabel=dict(
                        bgcolor="rgba(255,255,255,0.9)",
                        bordercolor="rgba(32,103,178,0.8)",
                        font=dict(color="rgba(23,64,109,1)", size=14)
                    )
                ))
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True, 
                    range=[0, 5],
                    gridcolor="rgba(32,103,178,0.3)",
                    linecolor="rgba(32,103,178,0.5)",
                    tickfont=dict(color="black", size=12)
                ),
                angularaxis=dict(
                    gridcolor="rgba(32,103,178,0.3)",
                    linecolor="rgba(32,103,178,0.5)",
                    tickfont=dict(color="black", size=14)
                )
            ),
            showlegend=True,
            hovermode='closest',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color="black", size=12),
            autosize=True,
            margin=dict(l=20, r=20, t=20, b=20)
        )
        st.markdown('<div class="section-box">', unsafe_allow_html=True)
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="section-box">', unsafe_allow_html=True)
        st.subheader("Ch√∫ th√≠ch ti√™u ch√≠")
        st.markdown("""
        **üìä Thang ƒëi·ªÉm**: 0-5  
        **üí∞ Salary & benefits**: L∆∞∆°ng, th∆∞·ªüng, ph√∫c l·ª£i  
        **üìö Training & learning**: ƒê√†o t·∫°o, ph√°t tri·ªÉn  
        **ü§ù Management**: Quan t√¢m c·ªßa qu·∫£n l√Ω  
        **üéâ Culture & fun**: VƒÉn h√≥a, ho·∫°t ƒë·ªông  
        **üè¢ Office & workspace**: Kh√¥ng gian l√†m vi·ªác
        """)
        st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="section-box">', unsafe_allow_html=True)
    st.subheader("B·∫£ng ƒëi·ªÉm t·ª´ng ti√™u ch√≠ (AgGrid)")
    radar_table = overview_reviews[overview_reviews['Company Name'].isin(selected_companies)][['Company Name'] + metrics]
    radar_table = radar_table.reset_index(drop=True)
    
    # AgGrid cho radar table
    gb_radar = GridOptionsBuilder.from_dataframe(radar_table)
    gb_radar.configure_default_column(editable=False, filter=True, sortable=True, resizable=True)
    
    # Tooltip cho t·ª´ng cell
    cell_tooltip_radar = JsCode("""
    function(params) {
        var tooltips = {
            'Salary & benefits': 'L∆∞∆°ng, th∆∞·ªüng, ph√∫c l·ª£i',
            'Training & learning': 'C∆° h·ªôi ƒë√†o t·∫°o, ph√°t tri·ªÉn k·ªπ nƒÉng',
            'Management cares about me': 'Qu·∫£n l√Ω quan t√¢m t·ªõi nh√¢n vi√™n',
            'Culture & fun': 'VƒÉn h√≥a, ho·∫°t ƒë·ªông t·∫≠p th·ªÉ',
            'Office & workspace': 'Kh√¥ng gian l√†m vi·ªác, c∆° s·ªü v·∫≠t ch·∫•t'
        };
        var tooltip = tooltips[params.colDef.field] || '';
        return {'value': params.value + ' ƒëi·ªÉm - ' + tooltip};
    }
    """)
    
    gb_radar.configure_column('Company Name', pinned='left', width=180)
    for col in metrics:
        gb_radar.configure_column(col, tooltipField=col, cellRenderer=cell_tooltip_radar, width=120)
    
    gridOptions_radar = gb_radar.build()
    
    AgGrid(radar_table, gridOptions=gridOptions_radar, enable_enterprise_modules=False, 
           height=300, fit_columns_on_grid_load=True, theme='streamlit')
    st.markdown('</div>', unsafe_allow_html=True)

else:
    st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c√¥ng ty ƒë·ªÉ xem k·∫øt qu·∫£.")

st.markdown(
    "<hr/><center><small>Made by Data Science & ML | ITViec Project 2025</small></center>",
    unsafe_allow_html=True
)
